// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ambr {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* AddUnitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUnitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddUnitReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUnitReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitForReceiveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitForReceiveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWaitForReceiveUnitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWaitForReceiveUnitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWaitForReceiveUnitReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWaitForReceiveUnitReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBalanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBalanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBalanceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBalanceReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHistoryReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHistoryReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastUnitHashRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastUnitHashRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastUnitHashReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastUnitHashReplay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  AddUnitRequest_descriptor_ = file->message_type(0);
  static const int AddUnitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitRequest, json_),
  };
  AddUnitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddUnitRequest_descriptor_,
      AddUnitRequest::default_instance_,
      AddUnitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddUnitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitRequest, _is_default_instance_));
  AddUnitReply_descriptor_ = file->message_type(1);
  static const int AddUnitReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitReply, error_message_),
  };
  AddUnitReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddUnitReply_descriptor_,
      AddUnitReply::default_instance_,
      AddUnitReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddUnitReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUnitReply, _is_default_instance_));
  WaitForReceiveItem_descriptor_ = file->message_type(2);
  static const int WaitForReceiveItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForReceiveItem, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForReceiveItem, amount_),
  };
  WaitForReceiveItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WaitForReceiveItem_descriptor_,
      WaitForReceiveItem::default_instance_,
      WaitForReceiveItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(WaitForReceiveItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForReceiveItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitForReceiveItem, _is_default_instance_));
  GetWaitForReceiveUnitRequest_descriptor_ = file->message_type(3);
  static const int GetWaitForReceiveUnitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitRequest, public_key_),
  };
  GetWaitForReceiveUnitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetWaitForReceiveUnitRequest_descriptor_,
      GetWaitForReceiveUnitRequest::default_instance_,
      GetWaitForReceiveUnitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetWaitForReceiveUnitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitRequest, _is_default_instance_));
  GetWaitForReceiveUnitReply_descriptor_ = file->message_type(4);
  static const int GetWaitForReceiveUnitReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitReply, items_),
  };
  GetWaitForReceiveUnitReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetWaitForReceiveUnitReply_descriptor_,
      GetWaitForReceiveUnitReply::default_instance_,
      GetWaitForReceiveUnitReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetWaitForReceiveUnitReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWaitForReceiveUnitReply, _is_default_instance_));
  GetBalanceRequest_descriptor_ = file->message_type(5);
  static const int GetBalanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceRequest, public_key_),
  };
  GetBalanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetBalanceRequest_descriptor_,
      GetBalanceRequest::default_instance_,
      GetBalanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetBalanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceRequest, _is_default_instance_));
  GetBalanceReply_descriptor_ = file->message_type(6);
  static const int GetBalanceReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceReply, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceReply, error_message_),
  };
  GetBalanceReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetBalanceReply_descriptor_,
      GetBalanceReply::default_instance_,
      GetBalanceReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetBalanceReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceReply, _is_default_instance_));
  HistoryItem_descriptor_ = file->message_type(7);
  static const int HistoryItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, amount_),
  };
  HistoryItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryItem_descriptor_,
      HistoryItem::default_instance_,
      HistoryItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(HistoryItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, _is_default_instance_));
  GetHistoryRequest_descriptor_ = file->message_type(8);
  static const int GetHistoryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryRequest, public_key_),
  };
  GetHistoryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetHistoryRequest_descriptor_,
      GetHistoryRequest::default_instance_,
      GetHistoryRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetHistoryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryRequest, _is_default_instance_));
  GetHistoryReply_descriptor_ = file->message_type(9);
  static const int GetHistoryReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryReply, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryReply, error_message_),
  };
  GetHistoryReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetHistoryReply_descriptor_,
      GetHistoryReply::default_instance_,
      GetHistoryReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetHistoryReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryReply, _is_default_instance_));
  SendMessageRequest_descriptor_ = file->message_type(10);
  static const int SendMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, json_),
  };
  SendMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _is_default_instance_));
  SendMessageReply_descriptor_ = file->message_type(11);
  static const int SendMessageReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, error_message_),
  };
  SendMessageReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendMessageReply_descriptor_,
      SendMessageReply::default_instance_,
      SendMessageReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendMessageReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageReply, _is_default_instance_));
  GetLastUnitHashRequest_descriptor_ = file->message_type(12);
  static const int GetLastUnitHashRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashRequest, public_key_),
  };
  GetLastUnitHashRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetLastUnitHashRequest_descriptor_,
      GetLastUnitHashRequest::default_instance_,
      GetLastUnitHashRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetLastUnitHashRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashRequest, _is_default_instance_));
  GetLastUnitHashReplay_descriptor_ = file->message_type(13);
  static const int GetLastUnitHashReplay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashReplay, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashReplay, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashReplay, error_message_),
  };
  GetLastUnitHashReplay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetLastUnitHashReplay_descriptor_,
      GetLastUnitHashReplay::default_instance_,
      GetLastUnitHashReplay_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetLastUnitHashReplay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashReplay, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastUnitHashReplay, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddUnitRequest_descriptor_, &AddUnitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddUnitReply_descriptor_, &AddUnitReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WaitForReceiveItem_descriptor_, &WaitForReceiveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetWaitForReceiveUnitRequest_descriptor_, &GetWaitForReceiveUnitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetWaitForReceiveUnitReply_descriptor_, &GetWaitForReceiveUnitReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetBalanceRequest_descriptor_, &GetBalanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetBalanceReply_descriptor_, &GetBalanceReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryItem_descriptor_, &HistoryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetHistoryRequest_descriptor_, &GetHistoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetHistoryReply_descriptor_, &GetHistoryReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendMessageReply_descriptor_, &SendMessageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetLastUnitHashRequest_descriptor_, &GetLastUnitHashRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetLastUnitHashReplay_descriptor_, &GetLastUnitHashReplay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete AddUnitRequest::default_instance_;
  delete AddUnitRequest_reflection_;
  delete AddUnitReply::default_instance_;
  delete AddUnitReply_reflection_;
  delete WaitForReceiveItem::default_instance_;
  delete WaitForReceiveItem_reflection_;
  delete GetWaitForReceiveUnitRequest::default_instance_;
  delete GetWaitForReceiveUnitRequest_reflection_;
  delete GetWaitForReceiveUnitReply::default_instance_;
  delete GetWaitForReceiveUnitReply_reflection_;
  delete GetBalanceRequest::default_instance_;
  delete GetBalanceRequest_reflection_;
  delete GetBalanceReply::default_instance_;
  delete GetBalanceReply_reflection_;
  delete HistoryItem::default_instance_;
  delete HistoryItem_reflection_;
  delete GetHistoryRequest::default_instance_;
  delete GetHistoryRequest_reflection_;
  delete GetHistoryReply::default_instance_;
  delete GetHistoryReply_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete SendMessageReply::default_instance_;
  delete SendMessageReply_reflection_;
  delete GetLastUnitHashRequest::default_instance_;
  delete GetLastUnitHashRequest_reflection_;
  delete GetLastUnitHashReplay::default_instance_;
  delete GetLastUnitHashReplay_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\010ambr.rpc\"\036\n\016AddUnitRequest\022"
    "\014\n\004json\030\001 \001(\t\"5\n\014AddUnitReply\022\016\n\006result\030"
    "\001 \001(\010\022\025\n\rerror_message\030\002 \001(\t\"2\n\022WaitForR"
    "eceiveItem\022\014\n\004hash\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t"
    "\"2\n\034GetWaitForReceiveUnitRequest\022\022\n\npubl"
    "ic_key\030\001 \001(\t\"Y\n\032GetWaitForReceiveUnitRep"
    "ly\022\016\n\006result\030\001 \001(\010\022+\n\005items\030\002 \003(\0132\034.ambr"
    ".rpc.WaitForReceiveItem\"\'\n\021GetBalanceReq"
    "uest\022\022\n\npublic_key\030\001 \001(\t\"H\n\017GetBalanceRe"
    "ply\022\016\n\006result\030\001 \001(\010\022\016\n\006amount\030\002 \001(\t\022\025\n\re"
    "rror_message\030\003 \001(\t\"+\n\013HistoryItem\022\014\n\004typ"
    "e\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\"\'\n\021GetHistoryReq"
    "uest\022\022\n\npublic_key\030\001 \001(\t\"^\n\017GetHistoryRe"
    "ply\022\016\n\006result\030\001 \001(\010\022$\n\005items\030\002 \003(\0132\025.amb"
    "r.rpc.HistoryItem\022\025\n\rerror_message\030\003 \001(\t"
    "\"\"\n\022SendMessageRequest\022\014\n\004json\030\001 \001(\t\"9\n\020"
    "SendMessageReply\022\016\n\006result\030\001 \001(\010\022\025\n\rerro"
    "r_message\030\002 \001(\t\",\n\026GetLastUnitHashReques"
    "t\022\022\n\npublic_key\030\001 \001(\t\"L\n\025GetLastUnitHash"
    "Replay\022\016\n\006result\030\001 \001(\010\022\014\n\004hash\030\002 \001(\t\022\025\n\r"
    "error_message\030\003 \001(\t2\277\004\n\014RpcInterface\022G\n\021"
    "AddSendUnitByJson\022\030.ambr.rpc.AddUnitRequ"
    "est\032\026.ambr.rpc.AddUnitReply\"\000\022J\n\024AddRece"
    "iveUnitByJson\022\030.ambr.rpc.AddUnitRequest\032"
    "\026.ambr.rpc.AddUnitReply\"\000\022g\n\025GetWaitForR"
    "eceiveUnit\022&.ambr.rpc.GetWaitForReceiveU"
    "nitRequest\032$.ambr.rpc.GetWaitForReceiveU"
    "nitReply\"\000\022F\n\nGetBalance\022\033.ambr.rpc.GetB"
    "alanceRequest\032\031.ambr.rpc.GetBalanceReply"
    "\"\000\022F\n\nGetHistory\022\033.ambr.rpc.GetHistoryRe"
    "quest\032\031.ambr.rpc.GetHistoryReply\"\000\022I\n\013Se"
    "ndMessage\022\034.ambr.rpc.SendMessageRequest\032"
    "\032.ambr.rpc.SendMessageReply\"\000\022V\n\017GetLast"
    "UnitHash\022 .ambr.rpc.GetLastUnitHashReque"
    "st\032\037.ambr.rpc.GetLastUnitHashReplay\"\000b\006p"
    "roto3", 1405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  AddUnitRequest::default_instance_ = new AddUnitRequest();
  AddUnitReply::default_instance_ = new AddUnitReply();
  WaitForReceiveItem::default_instance_ = new WaitForReceiveItem();
  GetWaitForReceiveUnitRequest::default_instance_ = new GetWaitForReceiveUnitRequest();
  GetWaitForReceiveUnitReply::default_instance_ = new GetWaitForReceiveUnitReply();
  GetBalanceRequest::default_instance_ = new GetBalanceRequest();
  GetBalanceReply::default_instance_ = new GetBalanceReply();
  HistoryItem::default_instance_ = new HistoryItem();
  GetHistoryRequest::default_instance_ = new GetHistoryRequest();
  GetHistoryReply::default_instance_ = new GetHistoryReply();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  SendMessageReply::default_instance_ = new SendMessageReply();
  GetLastUnitHashRequest::default_instance_ = new GetLastUnitHashRequest();
  GetLastUnitHashReplay::default_instance_ = new GetLastUnitHashReplay();
  AddUnitRequest::default_instance_->InitAsDefaultInstance();
  AddUnitReply::default_instance_->InitAsDefaultInstance();
  WaitForReceiveItem::default_instance_->InitAsDefaultInstance();
  GetWaitForReceiveUnitRequest::default_instance_->InitAsDefaultInstance();
  GetWaitForReceiveUnitReply::default_instance_->InitAsDefaultInstance();
  GetBalanceRequest::default_instance_->InitAsDefaultInstance();
  GetBalanceReply::default_instance_->InitAsDefaultInstance();
  HistoryItem::default_instance_->InitAsDefaultInstance();
  GetHistoryRequest::default_instance_->InitAsDefaultInstance();
  GetHistoryReply::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  SendMessageReply::default_instance_->InitAsDefaultInstance();
  GetLastUnitHashRequest::default_instance_->InitAsDefaultInstance();
  GetLastUnitHashReplay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddUnitRequest::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddUnitRequest::AddUnitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.AddUnitRequest)
}

void AddUnitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddUnitRequest::AddUnitRequest(const AddUnitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.AddUnitRequest)
}

void AddUnitRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AddUnitRequest::~AddUnitRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.AddUnitRequest)
  SharedDtor();
}

void AddUnitRequest::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AddUnitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUnitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUnitRequest_descriptor_;
}

const AddUnitRequest& AddUnitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AddUnitRequest* AddUnitRequest::default_instance_ = NULL;

AddUnitRequest* AddUnitRequest::New(::google::protobuf::Arena* arena) const {
  AddUnitRequest* n = new AddUnitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddUnitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.AddUnitRequest)
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddUnitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.AddUnitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.AddUnitRequest.json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.AddUnitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.AddUnitRequest)
  return false;
#undef DO_
}

void AddUnitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.AddUnitRequest)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.AddUnitRequest.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.AddUnitRequest)
}

::google::protobuf::uint8* AddUnitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.AddUnitRequest)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.AddUnitRequest.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.AddUnitRequest)
  return target;
}

int AddUnitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.AddUnitRequest)
  int total_size = 0;

  // optional string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUnitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.AddUnitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddUnitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddUnitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.AddUnitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.AddUnitRequest)
    MergeFrom(*source);
  }
}

void AddUnitRequest::MergeFrom(const AddUnitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.AddUnitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void AddUnitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.AddUnitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUnitRequest::CopyFrom(const AddUnitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.AddUnitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUnitRequest::IsInitialized() const {

  return true;
}

void AddUnitRequest::Swap(AddUnitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddUnitRequest::InternalSwap(AddUnitRequest* other) {
  json_.Swap(&other->json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddUnitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUnitRequest_descriptor_;
  metadata.reflection = AddUnitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddUnitRequest

// optional string json = 1;
void AddUnitRequest::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AddUnitRequest::json() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitRequest.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddUnitRequest::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitRequest.json)
}
 void AddUnitRequest::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.AddUnitRequest.json)
}
 void AddUnitRequest::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.AddUnitRequest.json)
}
 ::std::string* AddUnitRequest::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.AddUnitRequest.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddUnitRequest::release_json() {
  // @@protoc_insertion_point(field_release:ambr.rpc.AddUnitRequest.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddUnitRequest::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.AddUnitRequest.json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddUnitReply::kResultFieldNumber;
const int AddUnitReply::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddUnitReply::AddUnitReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.AddUnitReply)
}

void AddUnitReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddUnitReply::AddUnitReply(const AddUnitReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.AddUnitReply)
}

void AddUnitReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AddUnitReply::~AddUnitReply() {
  // @@protoc_insertion_point(destructor:ambr.rpc.AddUnitReply)
  SharedDtor();
}

void AddUnitReply::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AddUnitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUnitReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUnitReply_descriptor_;
}

const AddUnitReply& AddUnitReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AddUnitReply* AddUnitReply::default_instance_ = NULL;

AddUnitReply* AddUnitReply::New(::google::protobuf::Arena* arena) const {
  AddUnitReply* n = new AddUnitReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddUnitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.AddUnitReply)
  result_ = false;
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddUnitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.AddUnitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.AddUnitReply.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.AddUnitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.AddUnitReply)
  return false;
#undef DO_
}

void AddUnitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.AddUnitReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.AddUnitReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.AddUnitReply)
}

::google::protobuf::uint8* AddUnitReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.AddUnitReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.AddUnitReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.AddUnitReply)
  return target;
}

int AddUnitReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.AddUnitReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUnitReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.AddUnitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddUnitReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddUnitReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.AddUnitReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.AddUnitReply)
    MergeFrom(*source);
  }
}

void AddUnitReply::MergeFrom(const AddUnitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.AddUnitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void AddUnitReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.AddUnitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUnitReply::CopyFrom(const AddUnitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.AddUnitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUnitReply::IsInitialized() const {

  return true;
}

void AddUnitReply::Swap(AddUnitReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddUnitReply::InternalSwap(AddUnitReply* other) {
  std::swap(result_, other->result_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddUnitReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUnitReply_descriptor_;
  metadata.reflection = AddUnitReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddUnitReply

// optional bool result = 1;
void AddUnitReply::clear_result() {
  result_ = false;
}
 bool AddUnitReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitReply.result)
  return result_;
}
 void AddUnitReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitReply.result)
}

// optional string error_message = 2;
void AddUnitReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AddUnitReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddUnitReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitReply.error_message)
}
 void AddUnitReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.AddUnitReply.error_message)
}
 void AddUnitReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.AddUnitReply.error_message)
}
 ::std::string* AddUnitReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.AddUnitReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddUnitReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.AddUnitReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddUnitReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.AddUnitReply.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitForReceiveItem::kHashFieldNumber;
const int WaitForReceiveItem::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitForReceiveItem::WaitForReceiveItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.WaitForReceiveItem)
}

void WaitForReceiveItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WaitForReceiveItem::WaitForReceiveItem(const WaitForReceiveItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.WaitForReceiveItem)
}

void WaitForReceiveItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WaitForReceiveItem::~WaitForReceiveItem() {
  // @@protoc_insertion_point(destructor:ambr.rpc.WaitForReceiveItem)
  SharedDtor();
}

void WaitForReceiveItem::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WaitForReceiveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitForReceiveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitForReceiveItem_descriptor_;
}

const WaitForReceiveItem& WaitForReceiveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

WaitForReceiveItem* WaitForReceiveItem::default_instance_ = NULL;

WaitForReceiveItem* WaitForReceiveItem::New(::google::protobuf::Arena* arena) const {
  WaitForReceiveItem* n = new WaitForReceiveItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaitForReceiveItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.WaitForReceiveItem)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WaitForReceiveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.WaitForReceiveItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.WaitForReceiveItem.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (tag == 18) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.WaitForReceiveItem.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.WaitForReceiveItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.WaitForReceiveItem)
  return false;
#undef DO_
}

void WaitForReceiveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.WaitForReceiveItem)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.WaitForReceiveItem.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.WaitForReceiveItem.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.WaitForReceiveItem)
}

::google::protobuf::uint8* WaitForReceiveItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.WaitForReceiveItem)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.WaitForReceiveItem.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.WaitForReceiveItem.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.WaitForReceiveItem)
  return target;
}

int WaitForReceiveItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.WaitForReceiveItem)
  int total_size = 0;

  // optional string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitForReceiveItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.WaitForReceiveItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WaitForReceiveItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WaitForReceiveItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.WaitForReceiveItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.WaitForReceiveItem)
    MergeFrom(*source);
  }
}

void WaitForReceiveItem::MergeFrom(const WaitForReceiveItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.WaitForReceiveItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
}

void WaitForReceiveItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.WaitForReceiveItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitForReceiveItem::CopyFrom(const WaitForReceiveItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.WaitForReceiveItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForReceiveItem::IsInitialized() const {

  return true;
}

void WaitForReceiveItem::Swap(WaitForReceiveItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitForReceiveItem::InternalSwap(WaitForReceiveItem* other) {
  hash_.Swap(&other->hash_);
  amount_.Swap(&other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaitForReceiveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitForReceiveItem_descriptor_;
  metadata.reflection = WaitForReceiveItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WaitForReceiveItem

// optional string hash = 1;
void WaitForReceiveItem::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WaitForReceiveItem::hash() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.WaitForReceiveItem.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WaitForReceiveItem::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.WaitForReceiveItem.hash)
}
 void WaitForReceiveItem::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.WaitForReceiveItem.hash)
}
 void WaitForReceiveItem::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.WaitForReceiveItem.hash)
}
 ::std::string* WaitForReceiveItem::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.WaitForReceiveItem.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WaitForReceiveItem::release_hash() {
  // @@protoc_insertion_point(field_release:ambr.rpc.WaitForReceiveItem.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WaitForReceiveItem::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.WaitForReceiveItem.hash)
}

// optional string amount = 2;
void WaitForReceiveItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WaitForReceiveItem::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.WaitForReceiveItem.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WaitForReceiveItem::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.WaitForReceiveItem.amount)
}
 void WaitForReceiveItem::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.WaitForReceiveItem.amount)
}
 void WaitForReceiveItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.WaitForReceiveItem.amount)
}
 ::std::string* WaitForReceiveItem::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.WaitForReceiveItem.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WaitForReceiveItem::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.WaitForReceiveItem.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WaitForReceiveItem::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.WaitForReceiveItem.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWaitForReceiveUnitRequest::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWaitForReceiveUnitRequest::GetWaitForReceiveUnitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetWaitForReceiveUnitRequest)
}

void GetWaitForReceiveUnitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetWaitForReceiveUnitRequest::GetWaitForReceiveUnitRequest(const GetWaitForReceiveUnitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetWaitForReceiveUnitRequest)
}

void GetWaitForReceiveUnitRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetWaitForReceiveUnitRequest::~GetWaitForReceiveUnitRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetWaitForReceiveUnitRequest)
  SharedDtor();
}

void GetWaitForReceiveUnitRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetWaitForReceiveUnitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWaitForReceiveUnitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWaitForReceiveUnitRequest_descriptor_;
}

const GetWaitForReceiveUnitRequest& GetWaitForReceiveUnitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetWaitForReceiveUnitRequest* GetWaitForReceiveUnitRequest::default_instance_ = NULL;

GetWaitForReceiveUnitRequest* GetWaitForReceiveUnitRequest::New(::google::protobuf::Arena* arena) const {
  GetWaitForReceiveUnitRequest* n = new GetWaitForReceiveUnitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWaitForReceiveUnitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetWaitForReceiveUnitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetWaitForReceiveUnitRequest.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetWaitForReceiveUnitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetWaitForReceiveUnitRequest)
  return false;
#undef DO_
}

void GetWaitForReceiveUnitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetWaitForReceiveUnitRequest.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetWaitForReceiveUnitRequest)
}

::google::protobuf::uint8* GetWaitForReceiveUnitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetWaitForReceiveUnitRequest.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetWaitForReceiveUnitRequest)
  return target;
}

int GetWaitForReceiveUnitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  int total_size = 0;

  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWaitForReceiveUnitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetWaitForReceiveUnitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWaitForReceiveUnitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetWaitForReceiveUnitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetWaitForReceiveUnitRequest)
    MergeFrom(*source);
  }
}

void GetWaitForReceiveUnitRequest::MergeFrom(const GetWaitForReceiveUnitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void GetWaitForReceiveUnitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWaitForReceiveUnitRequest::CopyFrom(const GetWaitForReceiveUnitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetWaitForReceiveUnitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWaitForReceiveUnitRequest::IsInitialized() const {

  return true;
}

void GetWaitForReceiveUnitRequest::Swap(GetWaitForReceiveUnitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWaitForReceiveUnitRequest::InternalSwap(GetWaitForReceiveUnitRequest* other) {
  public_key_.Swap(&other->public_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWaitForReceiveUnitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWaitForReceiveUnitRequest_descriptor_;
  metadata.reflection = GetWaitForReceiveUnitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWaitForReceiveUnitRequest

// optional string public_key = 1;
void GetWaitForReceiveUnitRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetWaitForReceiveUnitRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWaitForReceiveUnitRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
 void GetWaitForReceiveUnitRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
 void GetWaitForReceiveUnitRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
 ::std::string* GetWaitForReceiveUnitRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetWaitForReceiveUnitRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWaitForReceiveUnitRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWaitForReceiveUnitReply::kResultFieldNumber;
const int GetWaitForReceiveUnitReply::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWaitForReceiveUnitReply::GetWaitForReceiveUnitReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetWaitForReceiveUnitReply)
}

void GetWaitForReceiveUnitReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetWaitForReceiveUnitReply::GetWaitForReceiveUnitReply(const GetWaitForReceiveUnitReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetWaitForReceiveUnitReply)
}

void GetWaitForReceiveUnitReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = false;
}

GetWaitForReceiveUnitReply::~GetWaitForReceiveUnitReply() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetWaitForReceiveUnitReply)
  SharedDtor();
}

void GetWaitForReceiveUnitReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWaitForReceiveUnitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWaitForReceiveUnitReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWaitForReceiveUnitReply_descriptor_;
}

const GetWaitForReceiveUnitReply& GetWaitForReceiveUnitReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetWaitForReceiveUnitReply* GetWaitForReceiveUnitReply::default_instance_ = NULL;

GetWaitForReceiveUnitReply* GetWaitForReceiveUnitReply::New(::google::protobuf::Arena* arena) const {
  GetWaitForReceiveUnitReply* n = new GetWaitForReceiveUnitReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWaitForReceiveUnitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetWaitForReceiveUnitReply)
  result_ = false;
  items_.Clear();
}

bool GetWaitForReceiveUnitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetWaitForReceiveUnitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ambr.rpc.WaitForReceiveItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetWaitForReceiveUnitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetWaitForReceiveUnitReply)
  return false;
#undef DO_
}

void GetWaitForReceiveUnitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetWaitForReceiveUnitReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .ambr.rpc.WaitForReceiveItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetWaitForReceiveUnitReply)
}

::google::protobuf::uint8* GetWaitForReceiveUnitReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetWaitForReceiveUnitReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // repeated .ambr.rpc.WaitForReceiveItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetWaitForReceiveUnitReply)
  return target;
}

int GetWaitForReceiveUnitReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetWaitForReceiveUnitReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // repeated .ambr.rpc.WaitForReceiveItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWaitForReceiveUnitReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetWaitForReceiveUnitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetWaitForReceiveUnitReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWaitForReceiveUnitReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetWaitForReceiveUnitReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetWaitForReceiveUnitReply)
    MergeFrom(*source);
  }
}

void GetWaitForReceiveUnitReply::MergeFrom(const GetWaitForReceiveUnitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetWaitForReceiveUnitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GetWaitForReceiveUnitReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetWaitForReceiveUnitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWaitForReceiveUnitReply::CopyFrom(const GetWaitForReceiveUnitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetWaitForReceiveUnitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWaitForReceiveUnitReply::IsInitialized() const {

  return true;
}

void GetWaitForReceiveUnitReply::Swap(GetWaitForReceiveUnitReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWaitForReceiveUnitReply::InternalSwap(GetWaitForReceiveUnitReply* other) {
  std::swap(result_, other->result_);
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWaitForReceiveUnitReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWaitForReceiveUnitReply_descriptor_;
  metadata.reflection = GetWaitForReceiveUnitReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWaitForReceiveUnitReply

// optional bool result = 1;
void GetWaitForReceiveUnitReply::clear_result() {
  result_ = false;
}
 bool GetWaitForReceiveUnitReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitReply.result)
  return result_;
}
 void GetWaitForReceiveUnitReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetWaitForReceiveUnitReply.result)
}

// repeated .ambr.rpc.WaitForReceiveItem items = 2;
int GetWaitForReceiveUnitReply::items_size() const {
  return items_.size();
}
void GetWaitForReceiveUnitReply::clear_items() {
  items_.Clear();
}
const ::ambr::rpc::WaitForReceiveItem& GetWaitForReceiveUnitReply::items(int index) const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Get(index);
}
::ambr::rpc::WaitForReceiveItem* GetWaitForReceiveUnitReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Mutable(index);
}
::ambr::rpc::WaitForReceiveItem* GetWaitForReceiveUnitReply::add_items() {
  // @@protoc_insertion_point(field_add:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >*
GetWaitForReceiveUnitReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >&
GetWaitForReceiveUnitReply::items() const {
  // @@protoc_insertion_point(field_list:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceRequest::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceRequest::GetBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetBalanceRequest)
}

void GetBalanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetBalanceRequest)
  SharedDtor();
}

void GetBalanceRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetBalanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBalanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBalanceRequest_descriptor_;
}

const GetBalanceRequest& GetBalanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetBalanceRequest* GetBalanceRequest::default_instance_ = NULL;

GetBalanceRequest* GetBalanceRequest::New(::google::protobuf::Arena* arena) const {
  GetBalanceRequest* n = new GetBalanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetBalanceRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetBalanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetBalanceRequest.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetBalanceRequest)
  return false;
#undef DO_
}

void GetBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetBalanceRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceRequest.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetBalanceRequest)
}

::google::protobuf::uint8* GetBalanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetBalanceRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceRequest.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetBalanceRequest)
  return target;
}

int GetBalanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetBalanceRequest)
  int total_size = 0;

  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetBalanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetBalanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBalanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetBalanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void GetBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {

  return true;
}

void GetBalanceRequest::Swap(GetBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  public_key_.Swap(&other->public_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBalanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBalanceRequest_descriptor_;
  metadata.reflection = GetBalanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBalanceRequest

// optional string public_key = 1;
void GetBalanceRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetBalanceRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceRequest.public_key)
}
 void GetBalanceRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceRequest.public_key)
}
 void GetBalanceRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceRequest.public_key)
}
 ::std::string* GetBalanceRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetBalanceRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceRequest.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceReply::kResultFieldNumber;
const int GetBalanceReply::kAmountFieldNumber;
const int GetBalanceReply::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceReply::GetBalanceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetBalanceReply)
}

void GetBalanceReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetBalanceReply::GetBalanceReply(const GetBalanceReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetBalanceReply)
}

void GetBalanceReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetBalanceReply::~GetBalanceReply() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetBalanceReply)
  SharedDtor();
}

void GetBalanceReply::SharedDtor() {
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetBalanceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBalanceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBalanceReply_descriptor_;
}

const GetBalanceReply& GetBalanceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetBalanceReply* GetBalanceReply::default_instance_ = NULL;

GetBalanceReply* GetBalanceReply::New(::google::protobuf::Arena* arena) const {
  GetBalanceReply* n = new GetBalanceReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBalanceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetBalanceReply)
  result_ = false;
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetBalanceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetBalanceReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (tag == 18) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetBalanceReply.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }

      // optional string error_message = 3;
      case 3: {
        if (tag == 26) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetBalanceReply.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetBalanceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetBalanceReply)
  return false;
#undef DO_
}

void GetBalanceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetBalanceReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceReply.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetBalanceReply)
}

::google::protobuf::uint8* GetBalanceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetBalanceReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceReply.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetBalanceReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetBalanceReply)
  return target;
}

int GetBalanceReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetBalanceReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBalanceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetBalanceReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetBalanceReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBalanceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetBalanceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetBalanceReply)
    MergeFrom(*source);
  }
}

void GetBalanceReply::MergeFrom(const GetBalanceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetBalanceReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void GetBalanceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetBalanceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceReply::CopyFrom(const GetBalanceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetBalanceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceReply::IsInitialized() const {

  return true;
}

void GetBalanceReply::Swap(GetBalanceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceReply::InternalSwap(GetBalanceReply* other) {
  std::swap(result_, other->result_);
  amount_.Swap(&other->amount_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBalanceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBalanceReply_descriptor_;
  metadata.reflection = GetBalanceReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBalanceReply

// optional bool result = 1;
void GetBalanceReply::clear_result() {
  result_ = false;
}
 bool GetBalanceReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.result)
  return result_;
}
 void GetBalanceReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.result)
}

// optional string amount = 2;
void GetBalanceReply::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetBalanceReply::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceReply::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.amount)
}
 void GetBalanceReply::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceReply.amount)
}
 void GetBalanceReply::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceReply.amount)
}
 ::std::string* GetBalanceReply::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceReply.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetBalanceReply::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceReply.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceReply::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceReply.amount)
}

// optional string error_message = 3;
void GetBalanceReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetBalanceReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.error_message)
}
 void GetBalanceReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceReply.error_message)
}
 void GetBalanceReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceReply.error_message)
}
 ::std::string* GetBalanceReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetBalanceReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBalanceReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceReply.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryItem::kTypeFieldNumber;
const int HistoryItem::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryItem::HistoryItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.HistoryItem)
}

void HistoryItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HistoryItem::HistoryItem(const HistoryItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.HistoryItem)
}

void HistoryItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HistoryItem::~HistoryItem() {
  // @@protoc_insertion_point(destructor:ambr.rpc.HistoryItem)
  SharedDtor();
}

void HistoryItem::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HistoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryItem_descriptor_;
}

const HistoryItem& HistoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

HistoryItem* HistoryItem::default_instance_ = NULL;

HistoryItem* HistoryItem::New(::google::protobuf::Arena* arena) const {
  HistoryItem* n = new HistoryItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.HistoryItem)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HistoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.HistoryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.HistoryItem.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_amount;
        break;
      }

      // optional string amount = 2;
      case 2: {
        if (tag == 18) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.HistoryItem.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.HistoryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.HistoryItem)
  return false;
#undef DO_
}

void HistoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.HistoryItem)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.HistoryItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.HistoryItem.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.HistoryItem)
}

::google::protobuf::uint8* HistoryItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.HistoryItem)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.HistoryItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.HistoryItem.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.HistoryItem)
  return target;
}

int HistoryItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.HistoryItem)
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.HistoryItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.HistoryItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.HistoryItem)
    MergeFrom(*source);
  }
}

void HistoryItem::MergeFrom(const HistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.HistoryItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
}

void HistoryItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.HistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryItem::CopyFrom(const HistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.HistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryItem::IsInitialized() const {

  return true;
}

void HistoryItem::Swap(HistoryItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryItem::InternalSwap(HistoryItem* other) {
  type_.Swap(&other->type_);
  amount_.Swap(&other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryItem_descriptor_;
  metadata.reflection = HistoryItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryItem

// optional string type = 1;
void HistoryItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HistoryItem::type() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.HistoryItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HistoryItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.HistoryItem.type)
}
 void HistoryItem::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.HistoryItem.type)
}
 void HistoryItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.HistoryItem.type)
}
 ::std::string* HistoryItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.HistoryItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HistoryItem::release_type() {
  // @@protoc_insertion_point(field_release:ambr.rpc.HistoryItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HistoryItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.HistoryItem.type)
}

// optional string amount = 2;
void HistoryItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HistoryItem::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.HistoryItem.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HistoryItem::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.HistoryItem.amount)
}
 void HistoryItem::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.HistoryItem.amount)
}
 void HistoryItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.HistoryItem.amount)
}
 ::std::string* HistoryItem::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.HistoryItem.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HistoryItem::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.HistoryItem.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HistoryItem::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.HistoryItem.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHistoryRequest::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHistoryRequest::GetHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetHistoryRequest)
}

void GetHistoryRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetHistoryRequest::GetHistoryRequest(const GetHistoryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetHistoryRequest)
}

void GetHistoryRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetHistoryRequest::~GetHistoryRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetHistoryRequest)
  SharedDtor();
}

void GetHistoryRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistoryRequest_descriptor_;
}

const GetHistoryRequest& GetHistoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetHistoryRequest* GetHistoryRequest::default_instance_ = NULL;

GetHistoryRequest* GetHistoryRequest::New(::google::protobuf::Arena* arena) const {
  GetHistoryRequest* n = new GetHistoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetHistoryRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetHistoryRequest.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetHistoryRequest)
  return false;
#undef DO_
}

void GetHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetHistoryRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetHistoryRequest.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetHistoryRequest)
}

::google::protobuf::uint8* GetHistoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetHistoryRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetHistoryRequest.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetHistoryRequest)
  return target;
}

int GetHistoryRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetHistoryRequest)
  int total_size = 0;

  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetHistoryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetHistoryRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHistoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetHistoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetHistoryRequest)
    MergeFrom(*source);
  }
}

void GetHistoryRequest::MergeFrom(const GetHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetHistoryRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void GetHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoryRequest::CopyFrom(const GetHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryRequest::IsInitialized() const {

  return true;
}

void GetHistoryRequest::Swap(GetHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHistoryRequest::InternalSwap(GetHistoryRequest* other) {
  public_key_.Swap(&other->public_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHistoryRequest_descriptor_;
  metadata.reflection = GetHistoryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHistoryRequest

// optional string public_key = 1;
void GetHistoryRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetHistoryRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetHistoryRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryRequest.public_key)
}
 void GetHistoryRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetHistoryRequest.public_key)
}
 void GetHistoryRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetHistoryRequest.public_key)
}
 ::std::string* GetHistoryRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetHistoryRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetHistoryRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetHistoryRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetHistoryRequest.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHistoryReply::kResultFieldNumber;
const int GetHistoryReply::kItemsFieldNumber;
const int GetHistoryReply::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHistoryReply::GetHistoryReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetHistoryReply)
}

void GetHistoryReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetHistoryReply::GetHistoryReply(const GetHistoryReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetHistoryReply)
}

void GetHistoryReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetHistoryReply::~GetHistoryReply() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetHistoryReply)
  SharedDtor();
}

void GetHistoryReply::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetHistoryReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHistoryReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistoryReply_descriptor_;
}

const GetHistoryReply& GetHistoryReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetHistoryReply* GetHistoryReply::default_instance_ = NULL;

GetHistoryReply* GetHistoryReply::New(::google::protobuf::Arena* arena) const {
  GetHistoryReply* n = new GetHistoryReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHistoryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetHistoryReply)
  result_ = false;
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_.Clear();
}

bool GetHistoryReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetHistoryReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ambr.rpc.HistoryItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }

      // optional string error_message = 3;
      case 3: {
        if (tag == 26) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetHistoryReply.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetHistoryReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetHistoryReply)
  return false;
#undef DO_
}

void GetHistoryReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetHistoryReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .ambr.rpc.HistoryItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetHistoryReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetHistoryReply)
}

::google::protobuf::uint8* GetHistoryReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetHistoryReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // repeated .ambr.rpc.HistoryItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetHistoryReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetHistoryReply)
  return target;
}

int GetHistoryReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetHistoryReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // repeated .ambr.rpc.HistoryItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistoryReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetHistoryReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetHistoryReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHistoryReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetHistoryReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetHistoryReply)
    MergeFrom(*source);
  }
}

void GetHistoryReply::MergeFrom(const GetHistoryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetHistoryReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void GetHistoryReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetHistoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoryReply::CopyFrom(const GetHistoryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetHistoryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryReply::IsInitialized() const {

  return true;
}

void GetHistoryReply::Swap(GetHistoryReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHistoryReply::InternalSwap(GetHistoryReply* other) {
  std::swap(result_, other->result_);
  items_.UnsafeArenaSwap(&other->items_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHistoryReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHistoryReply_descriptor_;
  metadata.reflection = GetHistoryReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHistoryReply

// optional bool result = 1;
void GetHistoryReply::clear_result() {
  result_ = false;
}
 bool GetHistoryReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.result)
  return result_;
}
 void GetHistoryReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryReply.result)
}

// repeated .ambr.rpc.HistoryItem items = 2;
int GetHistoryReply::items_size() const {
  return items_.size();
}
void GetHistoryReply::clear_items() {
  items_.Clear();
}
const ::ambr::rpc::HistoryItem& GetHistoryReply::items(int index) const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.items)
  return items_.Get(index);
}
::ambr::rpc::HistoryItem* GetHistoryReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryReply.items)
  return items_.Mutable(index);
}
::ambr::rpc::HistoryItem* GetHistoryReply::add_items() {
  // @@protoc_insertion_point(field_add:ambr.rpc.GetHistoryReply.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >*
GetHistoryReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ambr.rpc.GetHistoryReply.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >&
GetHistoryReply::items() const {
  // @@protoc_insertion_point(field_list:ambr.rpc.GetHistoryReply.items)
  return items_;
}

// optional string error_message = 3;
void GetHistoryReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetHistoryReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetHistoryReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryReply.error_message)
}
 void GetHistoryReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetHistoryReply.error_message)
}
 void GetHistoryReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetHistoryReply.error_message)
}
 ::std::string* GetHistoryReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetHistoryReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetHistoryReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetHistoryReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetHistoryReply.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageRequest::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.SendMessageRequest)
}

void SendMessageRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.SendMessageRequest)
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New(::google::protobuf::Arena* arena) const {
  SendMessageRequest* n = new SendMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.SendMessageRequest)
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.SendMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.SendMessageRequest.json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.SendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.SendMessageRequest)
  return false;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.SendMessageRequest)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.SendMessageRequest.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.SendMessageRequest)
}

::google::protobuf::uint8* SendMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.SendMessageRequest)
  // optional string json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.SendMessageRequest.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.SendMessageRequest)
  return target;
}

int SendMessageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.SendMessageRequest)
  int total_size = 0;

  // optional string json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.SendMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.SendMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.SendMessageRequest)
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.SendMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {

  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  json_.Swap(&other->json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageRequest

// optional string json = 1;
void SendMessageRequest::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageRequest::json() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageRequest.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageRequest.json)
}
 void SendMessageRequest::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.SendMessageRequest.json)
}
 void SendMessageRequest::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.SendMessageRequest.json)
}
 ::std::string* SendMessageRequest::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.SendMessageRequest.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageRequest::release_json() {
  // @@protoc_insertion_point(field_release:ambr.rpc.SendMessageRequest.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageRequest::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.SendMessageRequest.json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageReply::kResultFieldNumber;
const int SendMessageReply::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageReply::SendMessageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.SendMessageReply)
}

void SendMessageReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SendMessageReply::SendMessageReply(const SendMessageReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.SendMessageReply)
}

void SendMessageReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendMessageReply::~SendMessageReply() {
  // @@protoc_insertion_point(destructor:ambr.rpc.SendMessageReply)
  SharedDtor();
}

void SendMessageReply::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendMessageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageReply_descriptor_;
}

const SendMessageReply& SendMessageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

SendMessageReply* SendMessageReply::default_instance_ = NULL;

SendMessageReply* SendMessageReply::New(::google::protobuf::Arena* arena) const {
  SendMessageReply* n = new SendMessageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.SendMessageReply)
  result_ = false;
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMessageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.SendMessageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.SendMessageReply.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.SendMessageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.SendMessageReply)
  return false;
#undef DO_
}

void SendMessageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.SendMessageReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.SendMessageReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.SendMessageReply)
}

::google::protobuf::uint8* SendMessageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.SendMessageReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.SendMessageReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.SendMessageReply)
  return target;
}

int SendMessageReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.SendMessageReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.SendMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendMessageReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.SendMessageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.SendMessageReply)
    MergeFrom(*source);
  }
}

void SendMessageReply::MergeFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.SendMessageReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void SendMessageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageReply::CopyFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageReply::IsInitialized() const {

  return true;
}

void SendMessageReply::Swap(SendMessageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageReply::InternalSwap(SendMessageReply* other) {
  std::swap(result_, other->result_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMessageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageReply_descriptor_;
  metadata.reflection = SendMessageReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageReply

// optional bool result = 1;
void SendMessageReply::clear_result() {
  result_ = false;
}
 bool SendMessageReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageReply.result)
  return result_;
}
 void SendMessageReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageReply.result)
}

// optional string error_message = 2;
void SendMessageReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendMessageReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageReply.error_message)
}
 void SendMessageReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.SendMessageReply.error_message)
}
 void SendMessageReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.SendMessageReply.error_message)
}
 ::std::string* SendMessageReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.SendMessageReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMessageReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.SendMessageReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMessageReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.SendMessageReply.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastUnitHashRequest::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastUnitHashRequest::GetLastUnitHashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetLastUnitHashRequest)
}

void GetLastUnitHashRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetLastUnitHashRequest::GetLastUnitHashRequest(const GetLastUnitHashRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetLastUnitHashRequest)
}

void GetLastUnitHashRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetLastUnitHashRequest::~GetLastUnitHashRequest() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetLastUnitHashRequest)
  SharedDtor();
}

void GetLastUnitHashRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetLastUnitHashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastUnitHashRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastUnitHashRequest_descriptor_;
}

const GetLastUnitHashRequest& GetLastUnitHashRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetLastUnitHashRequest* GetLastUnitHashRequest::default_instance_ = NULL;

GetLastUnitHashRequest* GetLastUnitHashRequest::New(::google::protobuf::Arena* arena) const {
  GetLastUnitHashRequest* n = new GetLastUnitHashRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLastUnitHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetLastUnitHashRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetLastUnitHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetLastUnitHashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetLastUnitHashRequest.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetLastUnitHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetLastUnitHashRequest)
  return false;
#undef DO_
}

void GetLastUnitHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetLastUnitHashRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashRequest.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetLastUnitHashRequest)
}

::google::protobuf::uint8* GetLastUnitHashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetLastUnitHashRequest)
  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashRequest.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetLastUnitHashRequest)
  return target;
}

int GetLastUnitHashRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetLastUnitHashRequest)
  int total_size = 0;

  // optional string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastUnitHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetLastUnitHashRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetLastUnitHashRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLastUnitHashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetLastUnitHashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetLastUnitHashRequest)
    MergeFrom(*source);
  }
}

void GetLastUnitHashRequest::MergeFrom(const GetLastUnitHashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetLastUnitHashRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void GetLastUnitHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetLastUnitHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastUnitHashRequest::CopyFrom(const GetLastUnitHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetLastUnitHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastUnitHashRequest::IsInitialized() const {

  return true;
}

void GetLastUnitHashRequest::Swap(GetLastUnitHashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastUnitHashRequest::InternalSwap(GetLastUnitHashRequest* other) {
  public_key_.Swap(&other->public_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLastUnitHashRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastUnitHashRequest_descriptor_;
  metadata.reflection = GetLastUnitHashRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLastUnitHashRequest

// optional string public_key = 1;
void GetLastUnitHashRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetLastUnitHashRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashRequest.public_key)
}
 void GetLastUnitHashRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashRequest.public_key)
}
 void GetLastUnitHashRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashRequest.public_key)
}
 ::std::string* GetLastUnitHashRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetLastUnitHashRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashRequest.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastUnitHashReplay::kResultFieldNumber;
const int GetLastUnitHashReplay::kHashFieldNumber;
const int GetLastUnitHashReplay::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastUnitHashReplay::GetLastUnitHashReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ambr.rpc.GetLastUnitHashReplay)
}

void GetLastUnitHashReplay::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetLastUnitHashReplay::GetLastUnitHashReplay(const GetLastUnitHashReplay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ambr.rpc.GetLastUnitHashReplay)
}

void GetLastUnitHashReplay::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetLastUnitHashReplay::~GetLastUnitHashReplay() {
  // @@protoc_insertion_point(destructor:ambr.rpc.GetLastUnitHashReplay)
  SharedDtor();
}

void GetLastUnitHashReplay::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetLastUnitHashReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastUnitHashReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastUnitHashReplay_descriptor_;
}

const GetLastUnitHashReplay& GetLastUnitHashReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetLastUnitHashReplay* GetLastUnitHashReplay::default_instance_ = NULL;

GetLastUnitHashReplay* GetLastUnitHashReplay::New(::google::protobuf::Arena* arena) const {
  GetLastUnitHashReplay* n = new GetLastUnitHashReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLastUnitHashReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:ambr.rpc.GetLastUnitHashReplay)
  result_ = false;
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetLastUnitHashReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ambr.rpc.GetLastUnitHashReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional string hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetLastUnitHashReplay.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }

      // optional string error_message = 3;
      case 3: {
        if (tag == 26) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ambr.rpc.GetLastUnitHashReplay.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ambr.rpc.GetLastUnitHashReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ambr.rpc.GetLastUnitHashReplay)
  return false;
#undef DO_
}

void GetLastUnitHashReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ambr.rpc.GetLastUnitHashReplay)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashReplay.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashReplay.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ambr.rpc.GetLastUnitHashReplay)
}

::google::protobuf::uint8* GetLastUnitHashReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ambr.rpc.GetLastUnitHashReplay)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashReplay.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ambr.rpc.GetLastUnitHashReplay.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ambr.rpc.GetLastUnitHashReplay)
  return target;
}

int GetLastUnitHashReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ambr.rpc.GetLastUnitHashReplay)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastUnitHashReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ambr.rpc.GetLastUnitHashReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetLastUnitHashReplay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLastUnitHashReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ambr.rpc.GetLastUnitHashReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ambr.rpc.GetLastUnitHashReplay)
    MergeFrom(*source);
  }
}

void GetLastUnitHashReplay::MergeFrom(const GetLastUnitHashReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ambr.rpc.GetLastUnitHashReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void GetLastUnitHashReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ambr.rpc.GetLastUnitHashReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastUnitHashReplay::CopyFrom(const GetLastUnitHashReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ambr.rpc.GetLastUnitHashReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastUnitHashReplay::IsInitialized() const {

  return true;
}

void GetLastUnitHashReplay::Swap(GetLastUnitHashReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastUnitHashReplay::InternalSwap(GetLastUnitHashReplay* other) {
  std::swap(result_, other->result_);
  hash_.Swap(&other->hash_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLastUnitHashReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastUnitHashReplay_descriptor_;
  metadata.reflection = GetLastUnitHashReplay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLastUnitHashReplay

// optional bool result = 1;
void GetLastUnitHashReplay::clear_result() {
  result_ = false;
}
 bool GetLastUnitHashReplay::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.result)
  return result_;
}
 void GetLastUnitHashReplay::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.result)
}

// optional string hash = 2;
void GetLastUnitHashReplay::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetLastUnitHashReplay::hash() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashReplay::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.hash)
}
 void GetLastUnitHashReplay::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashReplay.hash)
}
 void GetLastUnitHashReplay::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashReplay.hash)
}
 ::std::string* GetLastUnitHashReplay::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashReplay.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetLastUnitHashReplay::release_hash() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashReplay.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashReplay::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashReplay.hash)
}

// optional string error_message = 3;
void GetLastUnitHashReplay::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetLastUnitHashReplay::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashReplay::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.error_message)
}
 void GetLastUnitHashReplay::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashReplay.error_message)
}
 void GetLastUnitHashReplay::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashReplay.error_message)
}
 ::std::string* GetLastUnitHashReplay::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashReplay.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetLastUnitHashReplay::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashReplay.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetLastUnitHashReplay::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashReplay.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ambr

// @@protoc_insertion_point(global_scope)
