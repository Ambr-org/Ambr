// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ambr {
namespace rpc {

class RpcInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "ambr.rpc.RpcInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::ambr::rpc::AddUnitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>> AsyncAddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>>(AsyncAddSendUnitByJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>> PrepareAsyncAddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>>(PrepareAsyncAddSendUnitByJsonRaw(context, request, cq));
    }
    virtual ::grpc::Status AddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::ambr::rpc::AddUnitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>> AsyncAddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>>(AsyncAddReceiveUnitByJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>> PrepareAsyncAddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>>(PrepareAsyncAddReceiveUnitByJsonRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>> AsyncGetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>>(AsyncGetWaitForReceiveUnitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>> PrepareAsyncGetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>>(PrepareAsyncGetWaitForReceiveUnitRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::ambr::rpc::GetBalanceReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>> AsyncGetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::ambr::rpc::GetHistoryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>> AsyncGetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>>(AsyncGetHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>> PrepareAsyncGetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>>(PrepareAsyncGetHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::ambr::rpc::SendMessageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ambr::rpc::MessageStreamReply>> GetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ambr::rpc::MessageStreamReply>>(GetMessageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>> AsyncGetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>>(AsyncGetMessageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>> PrepareAsyncGetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>>(PrepareAsyncGetMessageStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::ambr::rpc::GetLastUnitHashReplay* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>> AsyncGetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>>(AsyncGetLastUnitHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>> PrepareAsyncGetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>>(PrepareAsyncGetLastUnitHashRaw(context, request, cq));
    }
    virtual ::grpc::Status PubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::ambr::rpc::PubSendTransfReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>> AsyncPubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>>(AsyncPubSendTransfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>> PrepareAsyncPubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>>(PrepareAsyncPubSendTransfRaw(context, request, cq));
    }
    virtual ::grpc::Status PubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::ambr::rpc::PubReceiveTransfReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>> AsyncPubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>>(AsyncPubReceiveTransfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>> PrepareAsyncPubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>>(PrepareAsyncPubReceiveTransfRaw(context, request, cq));
    }
    virtual ::grpc::Status PubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::ambr::rpc::PubSendMessageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>> AsyncPubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>>(AsyncPubSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>> PrepareAsyncPubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>>(PrepareAsyncPubSendMessageRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>* AsyncAddSendUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>* PrepareAsyncAddSendUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>* AsyncAddReceiveUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::AddUnitReply>* PrepareAsyncAddReceiveUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>* AsyncGetWaitForReceiveUnitRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetWaitForReceiveUnitReply>* PrepareAsyncGetWaitForReceiveUnitRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetBalanceReply>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>* AsyncGetHistoryRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetHistoryReply>* PrepareAsyncGetHistoryRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::SendMessageReply>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ambr::rpc::MessageStreamReply>* GetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>* AsyncGetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ambr::rpc::MessageStreamReply>* PrepareAsyncGetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>* AsyncGetLastUnitHashRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::GetLastUnitHashReplay>* PrepareAsyncGetLastUnitHashRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>* AsyncPubSendTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendTransfReply>* PrepareAsyncPubSendTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>* AsyncPubReceiveTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubReceiveTransfReply>* PrepareAsyncPubReceiveTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>* AsyncPubSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ambr::rpc::PubSendMessageReply>* PrepareAsyncPubSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::ambr::rpc::AddUnitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>> AsyncAddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>>(AsyncAddSendUnitByJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>> PrepareAsyncAddSendUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>>(PrepareAsyncAddSendUnitByJsonRaw(context, request, cq));
    }
    ::grpc::Status AddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::ambr::rpc::AddUnitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>> AsyncAddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>>(AsyncAddReceiveUnitByJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>> PrepareAsyncAddReceiveUnitByJson(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>>(PrepareAsyncAddReceiveUnitByJsonRaw(context, request, cq));
    }
    ::grpc::Status GetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>> AsyncGetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>>(AsyncGetWaitForReceiveUnitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>> PrepareAsyncGetWaitForReceiveUnit(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>>(PrepareAsyncGetWaitForReceiveUnitRaw(context, request, cq));
    }
    ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::ambr::rpc::GetBalanceReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>> AsyncGetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    ::grpc::Status GetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::ambr::rpc::GetHistoryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>> AsyncGetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>>(AsyncGetHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>> PrepareAsyncGetHistory(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>>(PrepareAsyncGetHistoryRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::ambr::rpc::SendMessageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ambr::rpc::MessageStreamReply>> GetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ambr::rpc::MessageStreamReply>>(GetMessageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>> AsyncGetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>>(AsyncGetMessageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>> PrepareAsyncGetMessageStream(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>>(PrepareAsyncGetMessageStreamRaw(context, request, cq));
    }
    ::grpc::Status GetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::ambr::rpc::GetLastUnitHashReplay* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>> AsyncGetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>>(AsyncGetLastUnitHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>> PrepareAsyncGetLastUnitHash(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>>(PrepareAsyncGetLastUnitHashRaw(context, request, cq));
    }
    ::grpc::Status PubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::ambr::rpc::PubSendTransfReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>> AsyncPubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>>(AsyncPubSendTransfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>> PrepareAsyncPubSendTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>>(PrepareAsyncPubSendTransfRaw(context, request, cq));
    }
    ::grpc::Status PubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::ambr::rpc::PubReceiveTransfReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>> AsyncPubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>>(AsyncPubReceiveTransfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>> PrepareAsyncPubReceiveTransf(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>>(PrepareAsyncPubReceiveTransfRaw(context, request, cq));
    }
    ::grpc::Status PubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::ambr::rpc::PubSendMessageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>> AsyncPubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>>(AsyncPubSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>> PrepareAsyncPubSendMessage(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>>(PrepareAsyncPubSendMessageRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>* AsyncAddSendUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>* PrepareAsyncAddSendUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>* AsyncAddReceiveUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::AddUnitReply>* PrepareAsyncAddReceiveUnitByJsonRaw(::grpc::ClientContext* context, const ::ambr::rpc::AddUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>* AsyncGetWaitForReceiveUnitRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetWaitForReceiveUnitReply>* PrepareAsyncGetWaitForReceiveUnitRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetBalanceReply>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>* AsyncGetHistoryRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetHistoryReply>* PrepareAsyncGetHistoryRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::SendMessageReply>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ambr::rpc::MessageStreamReply>* GetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>* AsyncGetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ambr::rpc::MessageStreamReply>* PrepareAsyncGetMessageStreamRaw(::grpc::ClientContext* context, const ::ambr::rpc::MessageStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>* AsyncGetLastUnitHashRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::GetLastUnitHashReplay>* PrepareAsyncGetLastUnitHashRaw(::grpc::ClientContext* context, const ::ambr::rpc::GetLastUnitHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>* AsyncPubSendTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendTransfReply>* PrepareAsyncPubSendTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendTransfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>* AsyncPubReceiveTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubReceiveTransfReply>* PrepareAsyncPubReceiveTransfRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubReceiveTransfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>* AsyncPubSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ambr::rpc::PubSendMessageReply>* PrepareAsyncPubSendMessageRaw(::grpc::ClientContext* context, const ::ambr::rpc::PubSendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddSendUnitByJson_;
    const ::grpc::internal::RpcMethod rpcmethod_AddReceiveUnitByJson_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWaitForReceiveUnit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessageStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastUnitHash_;
    const ::grpc::internal::RpcMethod rpcmethod_PubSendTransf_;
    const ::grpc::internal::RpcMethod rpcmethod_PubReceiveTransf_;
    const ::grpc::internal::RpcMethod rpcmethod_PubSendMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddSendUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response);
    virtual ::grpc::Status AddReceiveUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response);
    virtual ::grpc::Status GetWaitForReceiveUnit(::grpc::ServerContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::ambr::rpc::GetWaitForReceiveUnitReply* response);
    virtual ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::ambr::rpc::GetBalanceRequest* request, ::ambr::rpc::GetBalanceReply* response);
    virtual ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::ambr::rpc::GetHistoryRequest* request, ::ambr::rpc::GetHistoryReply* response);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::ambr::rpc::SendMessageRequest* request, ::ambr::rpc::SendMessageReply* response);
    virtual ::grpc::Status GetMessageStream(::grpc::ServerContext* context, const ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerWriter< ::ambr::rpc::MessageStreamReply>* writer);
    virtual ::grpc::Status GetLastUnitHash(::grpc::ServerContext* context, const ::ambr::rpc::GetLastUnitHashRequest* request, ::ambr::rpc::GetLastUnitHashReplay* response);
    virtual ::grpc::Status PubSendTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubSendTransfRequest* request, ::ambr::rpc::PubSendTransfReply* response);
    virtual ::grpc::Status PubReceiveTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubReceiveTransfRequest* request, ::ambr::rpc::PubReceiveTransfReply* response);
    virtual ::grpc::Status PubSendMessage(::grpc::ServerContext* context, const ::ambr::rpc::PubSendMessageRequest* request, ::ambr::rpc::PubSendMessageReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSendUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddSendUnitByJson() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddSendUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSendUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSendUnitByJson(::grpc::ServerContext* context, ::ambr::rpc::AddUnitRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::AddUnitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddReceiveUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddReceiveUnitByJson() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddReceiveUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddReceiveUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddReceiveUnitByJson(::grpc::ServerContext* context, ::ambr::rpc::AddUnitRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::AddUnitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWaitForReceiveUnit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWaitForReceiveUnit() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWaitForReceiveUnit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaitForReceiveUnit(::grpc::ServerContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWaitForReceiveUnit(::grpc::ServerContext* context, ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::GetWaitForReceiveUnitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBalance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::ambr::rpc::GetBalanceRequest* request, ::ambr::rpc::GetBalanceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::ambr::rpc::GetBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::GetBalanceReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHistory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::ambr::rpc::GetHistoryRequest* request, ::ambr::rpc::GetHistoryReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHistory(::grpc::ServerContext* context, ::ambr::rpc::GetHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::GetHistoryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::ambr::rpc::SendMessageRequest* request, ::ambr::rpc::SendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::ambr::rpc::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::SendMessageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMessageStream() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageStream(::grpc::ServerContext* context, const ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerWriter< ::ambr::rpc::MessageStreamReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageStream(::grpc::ServerContext* context, ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerAsyncWriter< ::ambr::rpc::MessageStreamReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastUnitHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetLastUnitHash() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetLastUnitHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastUnitHash(::grpc::ServerContext* context, const ::ambr::rpc::GetLastUnitHashRequest* request, ::ambr::rpc::GetLastUnitHashReplay* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastUnitHash(::grpc::ServerContext* context, ::ambr::rpc::GetLastUnitHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::GetLastUnitHashReplay>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PubSendTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PubSendTransf() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PubSendTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubSendTransfRequest* request, ::ambr::rpc::PubSendTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubSendTransf(::grpc::ServerContext* context, ::ambr::rpc::PubSendTransfRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::PubSendTransfReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PubReceiveTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PubReceiveTransf() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PubReceiveTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubReceiveTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubReceiveTransfRequest* request, ::ambr::rpc::PubReceiveTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubReceiveTransf(::grpc::ServerContext* context, ::ambr::rpc::PubReceiveTransfRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::PubReceiveTransfReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PubSendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PubSendMessage() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_PubSendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendMessage(::grpc::ServerContext* context, const ::ambr::rpc::PubSendMessageRequest* request, ::ambr::rpc::PubSendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubSendMessage(::grpc::ServerContext* context, ::ambr::rpc::PubSendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::ambr::rpc::PubSendMessageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddSendUnitByJson<WithAsyncMethod_AddReceiveUnitByJson<WithAsyncMethod_GetWaitForReceiveUnit<WithAsyncMethod_GetBalance<WithAsyncMethod_GetHistory<WithAsyncMethod_SendMessage<WithAsyncMethod_GetMessageStream<WithAsyncMethod_GetLastUnitHash<WithAsyncMethod_PubSendTransf<WithAsyncMethod_PubReceiveTransf<WithAsyncMethod_PubSendMessage<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AddSendUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddSendUnitByJson() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddSendUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSendUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddReceiveUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddReceiveUnitByJson() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddReceiveUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddReceiveUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWaitForReceiveUnit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWaitForReceiveUnit() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWaitForReceiveUnit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaitForReceiveUnit(::grpc::ServerContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBalance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::ambr::rpc::GetBalanceRequest* request, ::ambr::rpc::GetBalanceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHistory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::ambr::rpc::GetHistoryRequest* request, ::ambr::rpc::GetHistoryReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::ambr::rpc::SendMessageRequest* request, ::ambr::rpc::SendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMessageStream() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageStream(::grpc::ServerContext* context, const ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerWriter< ::ambr::rpc::MessageStreamReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastUnitHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetLastUnitHash() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetLastUnitHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastUnitHash(::grpc::ServerContext* context, const ::ambr::rpc::GetLastUnitHashRequest* request, ::ambr::rpc::GetLastUnitHashReplay* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PubSendTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PubSendTransf() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PubSendTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubSendTransfRequest* request, ::ambr::rpc::PubSendTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PubReceiveTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PubReceiveTransf() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PubReceiveTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubReceiveTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubReceiveTransfRequest* request, ::ambr::rpc::PubReceiveTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PubSendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PubSendMessage() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_PubSendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendMessage(::grpc::ServerContext* context, const ::ambr::rpc::PubSendMessageRequest* request, ::ambr::rpc::PubSendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSendUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddSendUnitByJson() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddSendUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSendUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSendUnitByJson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddReceiveUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddReceiveUnitByJson() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddReceiveUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddReceiveUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddReceiveUnitByJson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWaitForReceiveUnit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetWaitForReceiveUnit() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetWaitForReceiveUnit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaitForReceiveUnit(::grpc::ServerContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWaitForReceiveUnit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBalance() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::ambr::rpc::GetBalanceRequest* request, ::ambr::rpc::GetBalanceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHistory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::ambr::rpc::GetHistoryRequest* request, ::ambr::rpc::GetHistoryReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::ambr::rpc::SendMessageRequest* request, ::ambr::rpc::SendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMessageStream() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageStream(::grpc::ServerContext* context, const ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerWriter< ::ambr::rpc::MessageStreamReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastUnitHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetLastUnitHash() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetLastUnitHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastUnitHash(::grpc::ServerContext* context, const ::ambr::rpc::GetLastUnitHashRequest* request, ::ambr::rpc::GetLastUnitHashReplay* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastUnitHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PubSendTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PubSendTransf() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PubSendTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubSendTransfRequest* request, ::ambr::rpc::PubSendTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubSendTransf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PubReceiveTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PubReceiveTransf() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PubReceiveTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubReceiveTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubReceiveTransfRequest* request, ::ambr::rpc::PubReceiveTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubReceiveTransf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PubSendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PubSendMessage() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_PubSendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PubSendMessage(::grpc::ServerContext* context, const ::ambr::rpc::PubSendMessageRequest* request, ::ambr::rpc::PubSendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPubSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddSendUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddSendUnitByJson() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::AddUnitRequest, ::ambr::rpc::AddUnitReply>(std::bind(&WithStreamedUnaryMethod_AddSendUnitByJson<BaseClass>::StreamedAddSendUnitByJson, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddSendUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddSendUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddSendUnitByJson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::AddUnitRequest,::ambr::rpc::AddUnitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddReceiveUnitByJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddReceiveUnitByJson() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::AddUnitRequest, ::ambr::rpc::AddUnitReply>(std::bind(&WithStreamedUnaryMethod_AddReceiveUnitByJson<BaseClass>::StreamedAddReceiveUnitByJson, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddReceiveUnitByJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddReceiveUnitByJson(::grpc::ServerContext* context, const ::ambr::rpc::AddUnitRequest* request, ::ambr::rpc::AddUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddReceiveUnitByJson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::AddUnitRequest,::ambr::rpc::AddUnitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWaitForReceiveUnit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWaitForReceiveUnit() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::GetWaitForReceiveUnitRequest, ::ambr::rpc::GetWaitForReceiveUnitReply>(std::bind(&WithStreamedUnaryMethod_GetWaitForReceiveUnit<BaseClass>::StreamedGetWaitForReceiveUnit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWaitForReceiveUnit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWaitForReceiveUnit(::grpc::ServerContext* context, const ::ambr::rpc::GetWaitForReceiveUnitRequest* request, ::ambr::rpc::GetWaitForReceiveUnitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWaitForReceiveUnit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::GetWaitForReceiveUnitRequest,::ambr::rpc::GetWaitForReceiveUnitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBalance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::GetBalanceRequest, ::ambr::rpc::GetBalanceReply>(std::bind(&WithStreamedUnaryMethod_GetBalance<BaseClass>::StreamedGetBalance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::ambr::rpc::GetBalanceRequest* request, ::ambr::rpc::GetBalanceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::GetBalanceRequest,::ambr::rpc::GetBalanceReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHistory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::GetHistoryRequest, ::ambr::rpc::GetHistoryReply>(std::bind(&WithStreamedUnaryMethod_GetHistory<BaseClass>::StreamedGetHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::ambr::rpc::GetHistoryRequest* request, ::ambr::rpc::GetHistoryReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::GetHistoryRequest,::ambr::rpc::GetHistoryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::SendMessageRequest, ::ambr::rpc::SendMessageReply>(std::bind(&WithStreamedUnaryMethod_SendMessage<BaseClass>::StreamedSendMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::ambr::rpc::SendMessageRequest* request, ::ambr::rpc::SendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::SendMessageRequest,::ambr::rpc::SendMessageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastUnitHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetLastUnitHash() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::GetLastUnitHashRequest, ::ambr::rpc::GetLastUnitHashReplay>(std::bind(&WithStreamedUnaryMethod_GetLastUnitHash<BaseClass>::StreamedGetLastUnitHash, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLastUnitHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastUnitHash(::grpc::ServerContext* context, const ::ambr::rpc::GetLastUnitHashRequest* request, ::ambr::rpc::GetLastUnitHashReplay* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastUnitHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::GetLastUnitHashRequest,::ambr::rpc::GetLastUnitHashReplay>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PubSendTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PubSendTransf() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::PubSendTransfRequest, ::ambr::rpc::PubSendTransfReply>(std::bind(&WithStreamedUnaryMethod_PubSendTransf<BaseClass>::StreamedPubSendTransf, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PubSendTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PubSendTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubSendTransfRequest* request, ::ambr::rpc::PubSendTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPubSendTransf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::PubSendTransfRequest,::ambr::rpc::PubSendTransfReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PubReceiveTransf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PubReceiveTransf() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::PubReceiveTransfRequest, ::ambr::rpc::PubReceiveTransfReply>(std::bind(&WithStreamedUnaryMethod_PubReceiveTransf<BaseClass>::StreamedPubReceiveTransf, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PubReceiveTransf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PubReceiveTransf(::grpc::ServerContext* context, const ::ambr::rpc::PubReceiveTransfRequest* request, ::ambr::rpc::PubReceiveTransfReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPubReceiveTransf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::PubReceiveTransfRequest,::ambr::rpc::PubReceiveTransfReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PubSendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PubSendMessage() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::ambr::rpc::PubSendMessageRequest, ::ambr::rpc::PubSendMessageReply>(std::bind(&WithStreamedUnaryMethod_PubSendMessage<BaseClass>::StreamedPubSendMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PubSendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PubSendMessage(::grpc::ServerContext* context, const ::ambr::rpc::PubSendMessageRequest* request, ::ambr::rpc::PubSendMessageReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPubSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ambr::rpc::PubSendMessageRequest,::ambr::rpc::PubSendMessageReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddSendUnitByJson<WithStreamedUnaryMethod_AddReceiveUnitByJson<WithStreamedUnaryMethod_GetWaitForReceiveUnit<WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_GetHistory<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetLastUnitHash<WithStreamedUnaryMethod_PubSendTransf<WithStreamedUnaryMethod_PubReceiveTransf<WithStreamedUnaryMethod_PubSendMessage<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMessageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetMessageStream() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::ambr::rpc::MessageStreamRequest, ::ambr::rpc::MessageStreamReply>(std::bind(&WithSplitStreamingMethod_GetMessageStream<BaseClass>::StreamedGetMessageStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetMessageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessageStream(::grpc::ServerContext* context, const ::ambr::rpc::MessageStreamRequest* request, ::grpc::ServerWriter< ::ambr::rpc::MessageStreamReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMessageStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ambr::rpc::MessageStreamRequest,::ambr::rpc::MessageStreamReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetMessageStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddSendUnitByJson<WithStreamedUnaryMethod_AddReceiveUnitByJson<WithStreamedUnaryMethod_GetWaitForReceiveUnit<WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_GetHistory<WithStreamedUnaryMethod_SendMessage<WithSplitStreamingMethod_GetMessageStream<WithStreamedUnaryMethod_GetLastUnitHash<WithStreamedUnaryMethod_PubSendTransf<WithStreamedUnaryMethod_PubReceiveTransf<WithStreamedUnaryMethod_PubSendMessage<Service > > > > > > > > > > > StreamedService;
};

}  // namespace rpc
}  // namespace ambr


#endif  // GRPC_rpc_2eproto__INCLUDED
