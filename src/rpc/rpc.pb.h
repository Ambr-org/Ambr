// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ambr {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class AddUnitReply;
class AddUnitRequest;
class GetBalanceReply;
class GetBalanceRequest;
class GetHistoryReply;
class GetHistoryRequest;
class GetLastUnitHashReplay;
class GetLastUnitHashRequest;
class GetWaitForReceiveUnitReply;
class GetWaitForReceiveUnitRequest;
class HistoryItem;
class SendMessageReply;
class SendMessageRequest;
class WaitForReceiveItem;

// ===================================================================

class AddUnitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.AddUnitRequest) */ {
 public:
  AddUnitRequest();
  virtual ~AddUnitRequest();

  AddUnitRequest(const AddUnitRequest& from);

  inline AddUnitRequest& operator=(const AddUnitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUnitRequest& default_instance();

  void Swap(AddUnitRequest* other);

  // implements Message ----------------------------------------------

  inline AddUnitRequest* New() const { return New(NULL); }

  AddUnitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddUnitRequest& from);
  void MergeFrom(const AddUnitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddUnitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:ambr.rpc.AddUnitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static AddUnitRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddUnitReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.AddUnitReply) */ {
 public:
  AddUnitReply();
  virtual ~AddUnitReply();

  AddUnitReply(const AddUnitReply& from);

  inline AddUnitReply& operator=(const AddUnitReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUnitReply& default_instance();

  void Swap(AddUnitReply* other);

  // implements Message ----------------------------------------------

  inline AddUnitReply* New() const { return New(NULL); }

  AddUnitReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddUnitReply& from);
  void MergeFrom(const AddUnitReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddUnitReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:ambr.rpc.AddUnitReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static AddUnitReply* default_instance_;
};
// -------------------------------------------------------------------

class WaitForReceiveItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.WaitForReceiveItem) */ {
 public:
  WaitForReceiveItem();
  virtual ~WaitForReceiveItem();

  WaitForReceiveItem(const WaitForReceiveItem& from);

  inline WaitForReceiveItem& operator=(const WaitForReceiveItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitForReceiveItem& default_instance();

  void Swap(WaitForReceiveItem* other);

  // implements Message ----------------------------------------------

  inline WaitForReceiveItem* New() const { return New(NULL); }

  WaitForReceiveItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitForReceiveItem& from);
  void MergeFrom(const WaitForReceiveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaitForReceiveItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // @@protoc_insertion_point(class_scope:ambr.rpc.WaitForReceiveItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static WaitForReceiveItem* default_instance_;
};
// -------------------------------------------------------------------

class GetWaitForReceiveUnitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetWaitForReceiveUnitRequest) */ {
 public:
  GetWaitForReceiveUnitRequest();
  virtual ~GetWaitForReceiveUnitRequest();

  GetWaitForReceiveUnitRequest(const GetWaitForReceiveUnitRequest& from);

  inline GetWaitForReceiveUnitRequest& operator=(const GetWaitForReceiveUnitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWaitForReceiveUnitRequest& default_instance();

  void Swap(GetWaitForReceiveUnitRequest* other);

  // implements Message ----------------------------------------------

  inline GetWaitForReceiveUnitRequest* New() const { return New(NULL); }

  GetWaitForReceiveUnitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetWaitForReceiveUnitRequest& from);
  void MergeFrom(const GetWaitForReceiveUnitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetWaitForReceiveUnitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetWaitForReceiveUnitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetWaitForReceiveUnitRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetWaitForReceiveUnitReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetWaitForReceiveUnitReply) */ {
 public:
  GetWaitForReceiveUnitReply();
  virtual ~GetWaitForReceiveUnitReply();

  GetWaitForReceiveUnitReply(const GetWaitForReceiveUnitReply& from);

  inline GetWaitForReceiveUnitReply& operator=(const GetWaitForReceiveUnitReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWaitForReceiveUnitReply& default_instance();

  void Swap(GetWaitForReceiveUnitReply* other);

  // implements Message ----------------------------------------------

  inline GetWaitForReceiveUnitReply* New() const { return New(NULL); }

  GetWaitForReceiveUnitReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetWaitForReceiveUnitReply& from);
  void MergeFrom(const GetWaitForReceiveUnitReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetWaitForReceiveUnitReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // repeated .ambr.rpc.WaitForReceiveItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::ambr::rpc::WaitForReceiveItem& items(int index) const;
  ::ambr::rpc::WaitForReceiveItem* mutable_items(int index);
  ::ambr::rpc::WaitForReceiveItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetWaitForReceiveUnitReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem > items_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetWaitForReceiveUnitReply* default_instance_;
};
// -------------------------------------------------------------------

class GetBalanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetBalanceRequest) */ {
 public:
  GetBalanceRequest();
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceRequest& default_instance();

  void Swap(GetBalanceRequest* other);

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const { return New(NULL); }

  GetBalanceRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBalanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetBalanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetBalanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetBalanceReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetBalanceReply) */ {
 public:
  GetBalanceReply();
  virtual ~GetBalanceReply();

  GetBalanceReply(const GetBalanceReply& from);

  inline GetBalanceReply& operator=(const GetBalanceReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceReply& default_instance();

  void Swap(GetBalanceReply* other);

  // implements Message ----------------------------------------------

  inline GetBalanceReply* New() const { return New(NULL); }

  GetBalanceReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBalanceReply& from);
  void MergeFrom(const GetBalanceReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBalanceReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetBalanceReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetBalanceReply* default_instance_;
};
// -------------------------------------------------------------------

class HistoryItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.HistoryItem) */ {
 public:
  HistoryItem();
  virtual ~HistoryItem();

  HistoryItem(const HistoryItem& from);

  inline HistoryItem& operator=(const HistoryItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryItem& default_instance();

  void Swap(HistoryItem* other);

  // implements Message ----------------------------------------------

  inline HistoryItem* New() const { return New(NULL); }

  HistoryItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HistoryItem& from);
  void MergeFrom(const HistoryItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistoryItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // @@protoc_insertion_point(class_scope:ambr.rpc.HistoryItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static HistoryItem* default_instance_;
};
// -------------------------------------------------------------------

class GetHistoryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetHistoryRequest) */ {
 public:
  GetHistoryRequest();
  virtual ~GetHistoryRequest();

  GetHistoryRequest(const GetHistoryRequest& from);

  inline GetHistoryRequest& operator=(const GetHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHistoryRequest& default_instance();

  void Swap(GetHistoryRequest* other);

  // implements Message ----------------------------------------------

  inline GetHistoryRequest* New() const { return New(NULL); }

  GetHistoryRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHistoryRequest& from);
  void MergeFrom(const GetHistoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetHistoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetHistoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetHistoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetHistoryReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetHistoryReply) */ {
 public:
  GetHistoryReply();
  virtual ~GetHistoryReply();

  GetHistoryReply(const GetHistoryReply& from);

  inline GetHistoryReply& operator=(const GetHistoryReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHistoryReply& default_instance();

  void Swap(GetHistoryReply* other);

  // implements Message ----------------------------------------------

  inline GetHistoryReply* New() const { return New(NULL); }

  GetHistoryReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHistoryReply& from);
  void MergeFrom(const GetHistoryReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetHistoryReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // repeated .ambr.rpc.HistoryItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::ambr::rpc::HistoryItem& items(int index) const;
  ::ambr::rpc::HistoryItem* mutable_items(int index);
  ::ambr::rpc::HistoryItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >&
      items() const;

  // optional string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetHistoryReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem > items_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetHistoryReply* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.SendMessageRequest) */ {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();

  void Swap(SendMessageRequest* other);

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const { return New(NULL); }

  SendMessageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:ambr.rpc.SendMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.SendMessageReply) */ {
 public:
  SendMessageReply();
  virtual ~SendMessageReply();

  SendMessageReply(const SendMessageReply& from);

  inline SendMessageReply& operator=(const SendMessageReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageReply& default_instance();

  void Swap(SendMessageReply* other);

  // implements Message ----------------------------------------------

  inline SendMessageReply* New() const { return New(NULL); }

  SendMessageReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageReply& from);
  void MergeFrom(const SendMessageReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendMessageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:ambr.rpc.SendMessageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static SendMessageReply* default_instance_;
};
// -------------------------------------------------------------------

class GetLastUnitHashRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetLastUnitHashRequest) */ {
 public:
  GetLastUnitHashRequest();
  virtual ~GetLastUnitHashRequest();

  GetLastUnitHashRequest(const GetLastUnitHashRequest& from);

  inline GetLastUnitHashRequest& operator=(const GetLastUnitHashRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastUnitHashRequest& default_instance();

  void Swap(GetLastUnitHashRequest* other);

  // implements Message ----------------------------------------------

  inline GetLastUnitHashRequest* New() const { return New(NULL); }

  GetLastUnitHashRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastUnitHashRequest& from);
  void MergeFrom(const GetLastUnitHashRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastUnitHashRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetLastUnitHashRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetLastUnitHashRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLastUnitHashReplay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ambr.rpc.GetLastUnitHashReplay) */ {
 public:
  GetLastUnitHashReplay();
  virtual ~GetLastUnitHashReplay();

  GetLastUnitHashReplay(const GetLastUnitHashReplay& from);

  inline GetLastUnitHashReplay& operator=(const GetLastUnitHashReplay& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastUnitHashReplay& default_instance();

  void Swap(GetLastUnitHashReplay* other);

  // implements Message ----------------------------------------------

  inline GetLastUnitHashReplay* New() const { return New(NULL); }

  GetLastUnitHashReplay* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastUnitHashReplay& from);
  void MergeFrom(const GetLastUnitHashReplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastUnitHashReplay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:ambr.rpc.GetLastUnitHashReplay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static GetLastUnitHashReplay* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AddUnitRequest

// optional string json = 1;
inline void AddUnitRequest::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUnitRequest::json() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitRequest.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUnitRequest::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitRequest.json)
}
inline void AddUnitRequest::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.AddUnitRequest.json)
}
inline void AddUnitRequest::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.AddUnitRequest.json)
}
inline ::std::string* AddUnitRequest::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.AddUnitRequest.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUnitRequest::release_json() {
  // @@protoc_insertion_point(field_release:ambr.rpc.AddUnitRequest.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUnitRequest::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.AddUnitRequest.json)
}

// -------------------------------------------------------------------

// AddUnitReply

// optional bool result = 1;
inline void AddUnitReply::clear_result() {
  result_ = false;
}
inline bool AddUnitReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitReply.result)
  return result_;
}
inline void AddUnitReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitReply.result)
}

// optional string error_message = 2;
inline void AddUnitReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUnitReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.AddUnitReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUnitReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.AddUnitReply.error_message)
}
inline void AddUnitReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.AddUnitReply.error_message)
}
inline void AddUnitReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.AddUnitReply.error_message)
}
inline ::std::string* AddUnitReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.AddUnitReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUnitReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.AddUnitReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUnitReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.AddUnitReply.error_message)
}

// -------------------------------------------------------------------

// WaitForReceiveItem

// optional string hash = 1;
inline void WaitForReceiveItem::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WaitForReceiveItem::hash() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.WaitForReceiveItem.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WaitForReceiveItem::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.WaitForReceiveItem.hash)
}
inline void WaitForReceiveItem::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.WaitForReceiveItem.hash)
}
inline void WaitForReceiveItem::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.WaitForReceiveItem.hash)
}
inline ::std::string* WaitForReceiveItem::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.WaitForReceiveItem.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WaitForReceiveItem::release_hash() {
  // @@protoc_insertion_point(field_release:ambr.rpc.WaitForReceiveItem.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WaitForReceiveItem::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.WaitForReceiveItem.hash)
}

// optional string amount = 2;
inline void WaitForReceiveItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WaitForReceiveItem::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.WaitForReceiveItem.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WaitForReceiveItem::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.WaitForReceiveItem.amount)
}
inline void WaitForReceiveItem::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.WaitForReceiveItem.amount)
}
inline void WaitForReceiveItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.WaitForReceiveItem.amount)
}
inline ::std::string* WaitForReceiveItem::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.WaitForReceiveItem.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WaitForReceiveItem::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.WaitForReceiveItem.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WaitForReceiveItem::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.WaitForReceiveItem.amount)
}

// -------------------------------------------------------------------

// GetWaitForReceiveUnitRequest

// optional string public_key = 1;
inline void GetWaitForReceiveUnitRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetWaitForReceiveUnitRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWaitForReceiveUnitRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
inline void GetWaitForReceiveUnitRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
inline void GetWaitForReceiveUnitRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}
inline ::std::string* GetWaitForReceiveUnitRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetWaitForReceiveUnitRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWaitForReceiveUnitRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetWaitForReceiveUnitRequest.public_key)
}

// -------------------------------------------------------------------

// GetWaitForReceiveUnitReply

// optional bool result = 1;
inline void GetWaitForReceiveUnitReply::clear_result() {
  result_ = false;
}
inline bool GetWaitForReceiveUnitReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitReply.result)
  return result_;
}
inline void GetWaitForReceiveUnitReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetWaitForReceiveUnitReply.result)
}

// repeated .ambr.rpc.WaitForReceiveItem items = 2;
inline int GetWaitForReceiveUnitReply::items_size() const {
  return items_.size();
}
inline void GetWaitForReceiveUnitReply::clear_items() {
  items_.Clear();
}
inline const ::ambr::rpc::WaitForReceiveItem& GetWaitForReceiveUnitReply::items(int index) const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Get(index);
}
inline ::ambr::rpc::WaitForReceiveItem* GetWaitForReceiveUnitReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Mutable(index);
}
inline ::ambr::rpc::WaitForReceiveItem* GetWaitForReceiveUnitReply::add_items() {
  // @@protoc_insertion_point(field_add:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >*
GetWaitForReceiveUnitReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::WaitForReceiveItem >&
GetWaitForReceiveUnitReply::items() const {
  // @@protoc_insertion_point(field_list:ambr.rpc.GetWaitForReceiveUnitReply.items)
  return items_;
}

// -------------------------------------------------------------------

// GetBalanceRequest

// optional string public_key = 1;
inline void GetBalanceRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceRequest.public_key)
}
inline void GetBalanceRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceRequest.public_key)
}
inline void GetBalanceRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceRequest.public_key)
}
inline ::std::string* GetBalanceRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceRequest.public_key)
}

// -------------------------------------------------------------------

// GetBalanceReply

// optional bool result = 1;
inline void GetBalanceReply::clear_result() {
  result_ = false;
}
inline bool GetBalanceReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.result)
  return result_;
}
inline void GetBalanceReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.result)
}

// optional string amount = 2;
inline void GetBalanceReply::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceReply::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceReply::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.amount)
}
inline void GetBalanceReply::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceReply.amount)
}
inline void GetBalanceReply::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceReply.amount)
}
inline ::std::string* GetBalanceReply::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceReply.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceReply::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceReply.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceReply::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceReply.amount)
}

// optional string error_message = 3;
inline void GetBalanceReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetBalanceReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetBalanceReply.error_message)
}
inline void GetBalanceReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetBalanceReply.error_message)
}
inline void GetBalanceReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetBalanceReply.error_message)
}
inline ::std::string* GetBalanceReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetBalanceReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetBalanceReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetBalanceReply.error_message)
}

// -------------------------------------------------------------------

// HistoryItem

// optional string type = 1;
inline void HistoryItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HistoryItem::type() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.HistoryItem.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.HistoryItem.type)
}
inline void HistoryItem::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.HistoryItem.type)
}
inline void HistoryItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.HistoryItem.type)
}
inline ::std::string* HistoryItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.HistoryItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HistoryItem::release_type() {
  // @@protoc_insertion_point(field_release:ambr.rpc.HistoryItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.HistoryItem.type)
}

// optional string amount = 2;
inline void HistoryItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HistoryItem::amount() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.HistoryItem.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryItem::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.HistoryItem.amount)
}
inline void HistoryItem::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.HistoryItem.amount)
}
inline void HistoryItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.HistoryItem.amount)
}
inline ::std::string* HistoryItem::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.HistoryItem.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HistoryItem::release_amount() {
  // @@protoc_insertion_point(field_release:ambr.rpc.HistoryItem.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryItem::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.HistoryItem.amount)
}

// -------------------------------------------------------------------

// GetHistoryRequest

// optional string public_key = 1;
inline void GetHistoryRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHistoryRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoryRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryRequest.public_key)
}
inline void GetHistoryRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetHistoryRequest.public_key)
}
inline void GetHistoryRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetHistoryRequest.public_key)
}
inline ::std::string* GetHistoryRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHistoryRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetHistoryRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoryRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetHistoryRequest.public_key)
}

// -------------------------------------------------------------------

// GetHistoryReply

// optional bool result = 1;
inline void GetHistoryReply::clear_result() {
  result_ = false;
}
inline bool GetHistoryReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.result)
  return result_;
}
inline void GetHistoryReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryReply.result)
}

// repeated .ambr.rpc.HistoryItem items = 2;
inline int GetHistoryReply::items_size() const {
  return items_.size();
}
inline void GetHistoryReply::clear_items() {
  items_.Clear();
}
inline const ::ambr::rpc::HistoryItem& GetHistoryReply::items(int index) const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.items)
  return items_.Get(index);
}
inline ::ambr::rpc::HistoryItem* GetHistoryReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryReply.items)
  return items_.Mutable(index);
}
inline ::ambr::rpc::HistoryItem* GetHistoryReply::add_items() {
  // @@protoc_insertion_point(field_add:ambr.rpc.GetHistoryReply.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >*
GetHistoryReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ambr.rpc.GetHistoryReply.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ambr::rpc::HistoryItem >&
GetHistoryReply::items() const {
  // @@protoc_insertion_point(field_list:ambr.rpc.GetHistoryReply.items)
  return items_;
}

// optional string error_message = 3;
inline void GetHistoryReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHistoryReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetHistoryReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoryReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetHistoryReply.error_message)
}
inline void GetHistoryReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetHistoryReply.error_message)
}
inline void GetHistoryReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetHistoryReply.error_message)
}
inline ::std::string* GetHistoryReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetHistoryReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHistoryReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetHistoryReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoryReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetHistoryReply.error_message)
}

// -------------------------------------------------------------------

// SendMessageRequest

// optional string json = 1;
inline void SendMessageRequest::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMessageRequest::json() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageRequest.json)
  return json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageRequest.json)
}
inline void SendMessageRequest::set_json(const char* value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.SendMessageRequest.json)
}
inline void SendMessageRequest::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.SendMessageRequest.json)
}
inline ::std::string* SendMessageRequest::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.SendMessageRequest.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_json() {
  // @@protoc_insertion_point(field_release:ambr.rpc.SendMessageRequest.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.SendMessageRequest.json)
}

// -------------------------------------------------------------------

// SendMessageReply

// optional bool result = 1;
inline void SendMessageReply::clear_result() {
  result_ = false;
}
inline bool SendMessageReply::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageReply.result)
  return result_;
}
inline void SendMessageReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageReply.result)
}

// optional string error_message = 2;
inline void SendMessageReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendMessageReply::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.SendMessageReply.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.SendMessageReply.error_message)
}
inline void SendMessageReply::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.SendMessageReply.error_message)
}
inline void SendMessageReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.SendMessageReply.error_message)
}
inline ::std::string* SendMessageReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.SendMessageReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageReply::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.SendMessageReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.SendMessageReply.error_message)
}

// -------------------------------------------------------------------

// GetLastUnitHashRequest

// optional string public_key = 1;
inline void GetLastUnitHashRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLastUnitHashRequest::public_key() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashRequest.public_key)
}
inline void GetLastUnitHashRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashRequest.public_key)
}
inline void GetLastUnitHashRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashRequest.public_key)
}
inline ::std::string* GetLastUnitHashRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLastUnitHashRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashRequest.public_key)
}

// -------------------------------------------------------------------

// GetLastUnitHashReplay

// optional bool result = 1;
inline void GetLastUnitHashReplay::clear_result() {
  result_ = false;
}
inline bool GetLastUnitHashReplay::result() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.result)
  return result_;
}
inline void GetLastUnitHashReplay::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.result)
}

// optional string hash = 2;
inline void GetLastUnitHashReplay::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLastUnitHashReplay::hash() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashReplay::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.hash)
}
inline void GetLastUnitHashReplay::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashReplay.hash)
}
inline void GetLastUnitHashReplay::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashReplay.hash)
}
inline ::std::string* GetLastUnitHashReplay::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashReplay.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLastUnitHashReplay::release_hash() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashReplay.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashReplay::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashReplay.hash)
}

// optional string error_message = 3;
inline void GetLastUnitHashReplay::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLastUnitHashReplay::error_message() const {
  // @@protoc_insertion_point(field_get:ambr.rpc.GetLastUnitHashReplay.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashReplay::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ambr.rpc.GetLastUnitHashReplay.error_message)
}
inline void GetLastUnitHashReplay::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ambr.rpc.GetLastUnitHashReplay.error_message)
}
inline void GetLastUnitHashReplay::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ambr.rpc.GetLastUnitHashReplay.error_message)
}
inline ::std::string* GetLastUnitHashReplay::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ambr.rpc.GetLastUnitHashReplay.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLastUnitHashReplay::release_error_message() {
  // @@protoc_insertion_point(field_release:ambr.rpc.GetLastUnitHashReplay.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastUnitHashReplay::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ambr.rpc.GetLastUnitHashReplay.error_message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ambr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
